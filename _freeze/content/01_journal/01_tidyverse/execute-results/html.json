{
  "hash": "d1acb08f4955cad3ed763a9c0d062a7c",
  "result": {
    "markdown": "---\ntitle: \"Tidyverse\"\nauthor: \"Subramanya Nanjangud Gurumurthy\"\n---\n\n\nTidyverse is a collection of R packages designed to make data manipulation, visualization, and analysis easier and more consistent. It provides a set of tools and functions that follow a consistent grammar and syntax, making it easier to work with data in a tidy and organized manner.\n\n# Challenges:\n\n* Analyze the sales by location (state) with a bar plot. Since state and city are multiple features (variables), they should be split. \nWhich state has the highes revenue? Replace your bike_orderlines_wrangled_tbl object with the newly wrangled object (with the columns state and city).\nHint: Add + theme(axis.text.x = element_text(angle = 45, hjust = 1)) to your plotting code to rotate your x-axis labels. Probably you have to resize the viewer pane to show the entire plot. \n\n* Analyze the sales by location and year (facet_wrap). Because there are 12 states with bike stores, you should get 12 plots.\n\n## Solution:\n\n* Load necessary libraries: This code block loads the required libraries, dplyr and ggplot2, which are used for data manipulation and plotting, respectively.\n\n* Read in the data file: The code reads an Excel file named \"bike_orderlines_new.xlsx\" and assigns it to the variable bike_orderlines_wrangled_tbl_new. The data is stored as a tibble, a modern version of a data frame. Please take care of path to read the file.\n\n* Split the location data: The separate() function is used to split the \"location\" column of the bike_orderlines_wrangled_tbl_new tibble into two separate columns, \"city\" and \"state\". The separator used is \", \" (comma followed by a space). The original \"location\" column is retained in the tibble.\n\n* Group the data and calculate total revenue: The group_by() function groups the data in bike_orderlines_wrangled_tbl_new by \"state\". Then, the summarize() function calculates the total revenue by summing the \"total_price\" column. The results are stored in the sales_by_loc_tbl_new tibble.\n\n* Create a bar plot: The ggplot() function is used to initialize a new ggplot object, with sales_by_loc_tbl_new as the data. The aesthetic mappings are set with aes(x = state, y = total_revenue). The geom_bar() function is used to create a bar plot with \"state\" on the x-axis and \"total_revenue\" on the y-axis. Additional formatting and labeling options are set using labs() and theme() functions.\n \n* Group the data by state and year and calculate total revenue: Similar to step 4, this code block groups the data by both \"state\" and \"model_year\" columns and calculates the total revenue for each group. The results are stored in the sales_by_loc_year_tbl_new tibble.\n\n* Create a bar plot with facets: This code block creates a bar plot of the total revenue by \"model_year\" for each \"state\". The facet_wrap() function is used to create a grid of plots, with each plot representing a different state. The scales = \"free_x\" argument allows each facet to have an independent x-axis scale. The ncol = 4 argument sets the number of columns in the grid to 4.\n\nThe Complete solution to challenge:\n\n\n::: {.cell hash='01_tidyverse_cache/html/plot_9251a5c2a6d419258b1ba39a93c71f48'}\n\n```{.r .cell-code}\n##############################################################################################\n#Assignment task\n##############################################################################################\n\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(tidyverse)\n\n# Read in the data file\nbike_orderlines_wrangled_tbl_new <- read_excel(\"C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.xlsx\")\n\n# Split the location data into separate columns for state and city\nbike_orderlines_wrangled_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\nseparate(location, into = c(\"city\", \"state\"), sep = \", \", remove = FALSE)\n\n# Group the data by state and calculate the total revenue\nsales_by_loc_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\ngroup_by(state) %>%\nsummarize(total_revenue = sum(total_price))\n\n# Create a bar plot of the total revenue by state#\nggplot(sales_by_loc_tbl_new, aes(x = state, y = total_revenue)) +\ngeom_bar(stat = \"identity\", fill = \"steelblue\") +\nlabs(title = \"Total Revenue by State\", x = \"State\", y = \"Total Revenue\") +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](01_tidyverse_files/figure-html/plot-1.png){width=960}\n:::\n\n```{.r .cell-code}\n# Group the data by state and year and calculate the total revenue\nsales_by_loc_year_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\ngroup_by(state, model_year) %>%\nsummarize(total_revenue = sum(total_price))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'state'. You can override using the\n#> `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# Create a bar plot of the total revenue by state and year\nggplot(sales_by_loc_year_tbl_new, aes(x = model_year, y = total_revenue)) +\ngeom_bar(stat = \"identity\", fill = \"steelblue\") +\nlabs(title = \"Total Revenue by State and Year\", x = \"Year\", y = \"Total Revenue\") +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1)) +\nfacet_wrap(~state, scales = \"free_x\", ncol = 4)\n```\n\n::: {.cell-output-display}\n![](01_tidyverse_files/figure-html/plot-2.png){width=960}\n:::\n:::\n\n\n## Result Plots: \n\nThese images are obtained while running the program on local computer.\n\n![Toal Revenue by State](../../plots/Task_1/Total_revenue_by_state.png)\n\n![Toal Revenue by State and Year](../../plots/Task_1/total_revenue_by_state_and_year.png)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}