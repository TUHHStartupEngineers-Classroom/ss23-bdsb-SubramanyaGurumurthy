{
  "hash": "7744fbf680ff7924d2e7c2fa7352e5ac",
  "result": {
    "markdown": "---\ntitle: \"Tidyverse\"\nauthor: \"Subramanya Nanjangud Gurumurthy\"\n---\n\n\nTidyverse is a collection of R packages designed to make data manipulation, visualization, and analysis easier and more consistent. It provides a set of tools and functions that follow a consistent grammar and syntax, making it easier to work with data in a tidy and organized manner.\n\n# Source Code\n\nThe code from task explanation which is needed to solve the 1st challenge is:\n\n::: callout-note\nIf you are running the code, please change the file paths according to your working environment as absolute paths have been used \n:::\n\n```\n# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(conflicted)\nlibrary(tibble)    #--> is a modern re-imagining of the data frame\nlibrary(readr)     #--> provides a fast and friendly way to read rectangular data like csv\nlibrary(dplyr)     #--> provides a grammar of data manipulation\nlibrary(magrittr)  #--> offers a set of operators which make your code more readable (pipe operator)\nlibrary(tidyr)     #--> provides a set of functions that help you get to tidy data\nlibrary(stringr)   #--> provides a cohesive set of functions designed to make working with strings as easy as possible\nlibrary(ggplot2)   #--> graphics\n\nconflicts_prefer(magrittr::set_names)\n\n\n# 2.0 Importing Files ----\nbikes_tbl <- read_excel(\"C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\n\norderlines_tbl <- read_excel(\"C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n# Not necessary for this analysis, but for the sake of completeness\nbikeshops_tbl  <- read_excel(\"C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n# 3.0 Examining Data ----\n\norderlines_tbl\nglimpse(orderlines_tbl)\n\n# 4.0 Joining Data ----\n\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\nbike_orderlines_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\nbike_orderlines_joined_tbl %>% glimpse()\n\n# 5.0 Wrangling Data ----\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%\n  # 5.1 Separate category name\n  separate(col    = category,\n           into   = c(\"category.1\", \"category.2\", \"category.3\"),\n           sep    = \" - \") %>%\n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity) %>%\n  \n  # 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns\n  # 5.3.1 by exact column name\n  select(-...1, -gender) %>%\n  \n  # 5.3.2 by a pattern\n  # You can use the select_helpers to define patterns. \n  # Type ?ends_with and click on Select helpers in the documentation\n  select(-ends_with(\".id\")) %>%\n  \n  # 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\n  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% \n  \n  # 5.3.4 You can reorder the data by selecting the columns in your desired order.\n  # You can use select_helpers like contains() or everything()\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %>%\n  \n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n  \n  \n# 6.0 Business Insights ----\n# 6.1 Sales by Year ----\n\nlibrary(lubridate)\n# Step 1 - Manipulate\nsales_by_year_tbl <- bike_orderlines_wrangled_tbl %>%\n  \n  # Select columns\n  select(order_date, total_price) %>%\n  \n  # Add year column\n  mutate(year = year(order_date)) %>%\n  \n  # Grouping by year and summarizing sales\n  group_by(year) %>% \n  summarize(sales = sum(total_price)) %>%\n  \n  # Optional: Add a column that turns the numbers into a currency format \n  # (makes it in the plot optically more appealing)\n  # mutate(sales_text = scales::dollar(sales)) <- Works for dollar values\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\nsales_by_year_tbl\n\n# Step 1 - Manipulate\n\n# Step 2 - Visualize\n\n# Step 2 - Visualize\nsales_by_year_tbl %>%\n\n  # Setup canvas with the columns year (x-axis) and sales (y-axis)\n  ggplot(aes(x = year, y = sales)) +\n  \n  \n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n  \n  # Formatting\n  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. \n  # Again, we have to adjust it for euro values\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by year\",\n    subtitle = \"Upward Trend\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n# 6.2 Sales by Year and Category 2 ----\n\n# Step 1 - Manipulate\n\nsales_by_year_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%\n  \n  # Select columns and add a year\n  select(order_date, total_price, category_1) %>%\n  mutate(year = year(order_date)) %>%\n  \n  # Group by and summarize year and main catgegory\n  group_by(year, category_1) %>%\n  summarise(sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_year_cat_1_tbl  \n\n# Step 2 - Visualize\n\n# Step 2 - Visualize\nsales_by_year_cat_1_tbl %>%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = category_1)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n  \n  # Facet\n  facet_wrap(~ category_1) +\n  \n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by year and main category\",\n    subtitle = \"Each product category has an upward trend\",\n    fill = \"Main category\" # Changes the legend name\n  )\n\n\n\n# 7.0 Writing Files ----\n\n# 7.1 Excel ----\n\n# 7.1 Excel ----\n#install.packages(\"writexl\")\nlibrary(\"writexl\")\nbike_orderlines_wrangled_tbl %>%\n  write_xlsx(\"ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.xlsx\")\n\n# 7.2 CSV ----\nbike_orderlines_wrangled_tbl %>% \n  write_csv(\"ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.csv\")\n\n# 7.3 RDS ----\nbike_orderlines_wrangled_tbl %>% \n  write_rds(\"ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.rds\")\n\n\n```\n\n## Explanation On how to solve:\n\n* Load necessary libraries: This code block loads the required libraries, dplyr and ggplot2, which are used for data manipulation and plotting, respectively.\n\n\n::: {.cell hash='01_tidyverse_cache/html/unnamed-chunk-1_bb916b8ab4cf4b143aad2dafc240d354'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n* Read in the data file: The code reads an Excel file named \"bike_orderlines_new.xlsx\" and assigns it to the variable bike_orderlines_wrangled_tbl_new. The data is stored as a tibble, a modern version of a data frame. Please take care of path to read the file.\n\n```\nbike_orderlines_wrangled_tbl_new <- read_excel(\"C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.xlsx\")\n```\n\n* Split the location data: The separate() function is used to split the \"location\" column of the bike_orderlines_wrangled_tbl_new tibble into two separate columns, \"city\" and \"state\". The separator used is \", \" (comma followed by a space). The original \"location\" column is retained in the tibble.\n```\nbike_orderlines_wrangled_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\nseparate(location, into = c(\"city\", \"state\"), sep = \", \", remove = FALSE)\n```\n\n* Group the data and calculate total revenue: The group_by() function groups the data in bike_orderlines_wrangled_tbl_new by \"state\". Then, the summarize() function calculates the total revenue by summing the \"total_price\" column. The results are stored in the sales_by_loc_tbl_new tibble.\n\n```\nsales_by_loc_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\ngroup_by(state) %>%\nsummarize(total_revenue = sum(total_price))\n```\n\n* Create a bar plot: The ggplot() function is used to initialize a new ggplot object, with sales_by_loc_tbl_new as the data. The aesthetic mappings are set with aes(x = state, y = total_revenue). The geom_bar() function is used to create a bar plot with \"state\" on the x-axis and \"total_revenue\" on the y-axis. Additional formatting and labeling options are set using labs() and theme() functions.\n```\nggplot(sales_by_loc_tbl_new, aes(x = state, y = total_revenue)) +\ngeom_bar(stat = \"identity\", fill = \"steelblue\") +\nlabs(title = \"Total Revenue by State\", x = \"State\", y = \"Total Revenue\") +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n* Group the data by state and year and calculate total revenue: Similar to step 4, this code block groups the data by both \"state\" and \"model_year\" columns and calculates the total revenue for each group. The results are stored in the sales_by_loc_year_tbl_new tibble.\n> sales_by_loc_year_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\ngroup_by(state, model_year) %>%\nsummarize(total_revenue = sum(total_price))\n\n\n* Create a bar plot with facets: This code block creates a bar plot of the total revenue by \"model_year\" for each \"state\". The facet_wrap() function is used to create a grid of plots, with each plot representing a different state. The scales = \"free_x\" argument allows each facet to have an independent x-axis scale. The ncol = 4 argument sets the number of columns in the grid to 4.\n```\nggplot(sales_by_loc_year_tbl_new, aes(x = model_year, y = total_revenue)) +\ngeom_bar(stat = \"identity\", fill = \"steelblue\") +\nlabs(title = \"Total Revenue by State and Year\", x = \"Year\", y = \"Total Revenue\") +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1)) +\nfacet_wrap(~state, scales = \"free_x\", ncol = 4)\n```\n\nThe Complete solution to challenge:\n```\n##############################################################################################\n#Assignment task\n##############################################################################################\n\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Read in the data file\nbike_orderlines_wrangled_tbl_new <- read_excel(\"ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.xlsx\")\n\n# Split the location data into separate columns for state and city\nbike_orderlines_wrangled_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\nseparate(location, into = c(\"city\", \"state\"), sep = \", \", remove = FALSE)\n\n# Group the data by state and calculate the total revenue\nsales_by_loc_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\ngroup_by(state) %>%\nsummarize(total_revenue = sum(total_price))\n\n# Create a bar plot of the total revenue by state#\nggplot(sales_by_loc_tbl_new, aes(x = state, y = total_revenue)) +\ngeom_bar(stat = \"identity\", fill = \"steelblue\") +\nlabs(title = \"Total Revenue by State\", x = \"State\", y = \"Total Revenue\") +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n# Group the data by state and year and calculate the total revenue\nsales_by_loc_year_tbl_new <- bike_orderlines_wrangled_tbl_new %>%\ngroup_by(state, model_year) %>%\nsummarize(total_revenue = sum(total_price))\n\n# Create a bar plot of the total revenue by state and year\nggplot(sales_by_loc_year_tbl_new, aes(x = model_year, y = total_revenue)) +\ngeom_bar(stat = \"identity\", fill = \"steelblue\") +\nlabs(title = \"Total Revenue by State and Year\", x = \"Year\", y = \"Total Revenue\") +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1)) +\nfacet_wrap(~state, scales = \"free_x\", ncol = 4)\n```\n\n# Result Plots: \n\n![Revenue by Year](../../plots/Task_1/Revenue by year.png)\n\n![Toal Revenue by State](../../plots/Task_1/Total_revenue_by_state.png)\n\n![Toal Revenue by State and Year](../../plots/Task_1/total_revenue_by_state_and_year.png)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}