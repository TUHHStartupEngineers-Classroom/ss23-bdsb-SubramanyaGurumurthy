---
title: "Tidyverse"
author: "Subramanya Nanjangud Gurumurthy"
---

Tidyverse is a collection of R packages designed to make data manipulation, visualization, and analysis easier and more consistent. It provides a set of tools and functions that follow a consistent grammar and syntax, making it easier to work with data in a tidy and organized manner.

# Source Code

The code from task explanation which is needed to solve the 1st challenge is:

::: callout-note
If you are running the code, please change the file paths according to your working environment as absolute paths have been used 
:::

```
# Data Science at TUHH ------------------------------------------------------
# SALES ANALYSIS ----

# 1.0 Load libraries ----
library(tidyverse)
library(readxl)
library(conflicted)
library(tibble)    #--> is a modern re-imagining of the data frame
library(readr)     #--> provides a fast and friendly way to read rectangular data like csv
library(dplyr)     #--> provides a grammar of data manipulation
library(magrittr)  #--> offers a set of operators which make your code more readable (pipe operator)
library(tidyr)     #--> provides a set of functions that help you get to tidy data
library(stringr)   #--> provides a cohesive set of functions designed to make working with strings as easy as possible
library(ggplot2)   #--> graphics

conflicts_prefer(magrittr::set_names)


# 2.0 Importing Files ----
bikes_tbl <- read_excel("C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/01_raw_data/bikes.xlsx")

orderlines_tbl <- read_excel("C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx")

# Not necessary for this analysis, but for the sake of completeness
bikeshops_tbl  <- read_excel("C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx")

# 3.0 Examining Data ----

orderlines_tbl
glimpse(orderlines_tbl)

# 4.0 Joining Data ----

left_join(orderlines_tbl, bikes_tbl, by = c("product.id" = "bike.id"))

bike_orderlines_joined_tbl <- orderlines_tbl %>%
  left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
  left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))

bike_orderlines_joined_tbl %>% glimpse()

# 5.0 Wrangling Data ----
bike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%
  # 5.1 Separate category name
  separate(col    = category,
           into   = c("category.1", "category.2", "category.3"),
           sep    = " - ") %>%
  # 5.2 Add the total price (price * quantity) 
  # Add a column to a tibble that uses a formula-style calculation of other columns
  mutate(total.price = price * quantity) %>%
  
  # 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns
  # 5.3.1 by exact column name
  select(-...1, -gender) %>%
  
  # 5.3.2 by a pattern
  # You can use the select_helpers to define patterns. 
  # Type ?ends_with and click on Select helpers in the documentation
  select(-ends_with(".id")) %>%
  
  # 5.3.3 Actually we need the column "order.id". Let's bind it back to the data
  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% 
  
  # 5.3.4 You can reorder the data by selecting the columns in your desired order.
  # You can use select_helpers like contains() or everything()
  select(order.id, contains("order"), contains("model"), contains("category"),
         price, quantity, total.price,
         everything()) %>%
  
  # 5.4 Rename columns because we actually wanted underscores instead of the dots
  # (one at the time vs. multiple at once)
  rename(bikeshop = name) %>%
  set_names(names(.) %>% str_replace_all("\\.", "_"))
  
  
# 6.0 Business Insights ----
# 6.1 Sales by Year ----

library(lubridate)
# Step 1 - Manipulate
sales_by_year_tbl <- bike_orderlines_wrangled_tbl %>%
  
  # Select columns
  select(order_date, total_price) %>%
  
  # Add year column
  mutate(year = year(order_date)) %>%
  
  # Grouping by year and summarizing sales
  group_by(year) %>% 
  summarize(sales = sum(total_price)) %>%
  
  # Optional: Add a column that turns the numbers into a currency format 
  # (makes it in the plot optically more appealing)
  # mutate(sales_text = scales::dollar(sales)) <- Works for dollar values
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))
sales_by_year_tbl

# Step 1 - Manipulate

# Step 2 - Visualize

# Step 2 - Visualize
sales_by_year_tbl %>%

  # Setup canvas with the columns year (x-axis) and sales (y-axis)
  ggplot(aes(x = year, y = sales)) +
  
  
  # Geometries
  geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
  geom_label(aes(label = sales_text)) + # Adding labels to the bars
  geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
  
  # Formatting
  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. 
  # Again, we have to adjust it for euro values
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title    = "Revenue by year",
    subtitle = "Upward Trend",
    x = "", # Override defaults for x and y
    y = "Revenue"
  )

# 6.2 Sales by Year and Category 2 ----

# Step 1 - Manipulate

sales_by_year_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%
  
  # Select columns and add a year
  select(order_date, total_price, category_1) %>%
  mutate(year = year(order_date)) %>%
  
  # Group by and summarize year and main catgegory
  group_by(year, category_1) %>%
  summarise(sales = sum(total_price)) %>%
  ungroup() %>%
  
  # Format $ Text
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))

sales_by_year_cat_1_tbl  

# Step 2 - Visualize

# Step 2 - Visualize
sales_by_year_cat_1_tbl %>%
  
  # Set up x, y, fill
  ggplot(aes(x = year, y = sales, fill = category_1)) +
  
  # Geometries
  geom_col() + # Run up to here to get a stacked bar plot
  
  # Facet
  facet_wrap(~ category_1) +
  
  # Formatting
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title = "Revenue by year and main category",
    subtitle = "Each product category has an upward trend",
    fill = "Main category" # Changes the legend name
  )



# 7.0 Writing Files ----

# 7.1 Excel ----

# 7.1 Excel ----
#install.packages("writexl")
library("writexl")
bike_orderlines_wrangled_tbl %>%
  write_xlsx("ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.xlsx")

# 7.2 CSV ----
bike_orderlines_wrangled_tbl %>% 
  write_csv("ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.csv")

# 7.3 RDS ----
bike_orderlines_wrangled_tbl %>% 
  write_rds("ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.rds")


```

## Explanation On how to solve:

* Load necessary libraries: This code block loads the required libraries, dplyr and ggplot2, which are used for data manipulation and plotting, respectively.

* Read in the data file: The code reads an Excel file named "bike_orderlines_new.xlsx" and assigns it to the variable bike_orderlines_wrangled_tbl_new. The data is stored as a tibble, a modern version of a data frame. Please take care of path to read the file.

* Split the location data: The separate() function is used to split the "location" column of the bike_orderlines_wrangled_tbl_new tibble into two separate columns, "city" and "state". The separator used is ", " (comma followed by a space). The original "location" column is retained in the tibble.

* Group the data and calculate total revenue: The group_by() function groups the data in bike_orderlines_wrangled_tbl_new by "state". Then, the summarize() function calculates the total revenue by summing the "total_price" column. The results are stored in the sales_by_loc_tbl_new tibble.

* Create a bar plot: The ggplot() function is used to initialize a new ggplot object, with sales_by_loc_tbl_new as the data. The aesthetic mappings are set with aes(x = state, y = total_revenue). The geom_bar() function is used to create a bar plot with "state" on the x-axis and "total_revenue" on the y-axis. Additional formatting and labeling options are set using labs() and theme() functions.
 
* Group the data by state and year and calculate total revenue: Similar to step 4, this code block groups the data by both "state" and "model_year" columns and calculates the total revenue for each group. The results are stored in the sales_by_loc_year_tbl_new tibble.

* Create a bar plot with facets: This code block creates a bar plot of the total revenue by "model_year" for each "state". The facet_wrap() function is used to create a grid of plots, with each plot representing a different state. The scales = "free_x" argument allows each facet to have an independent x-axis scale. The ncol = 4 argument sets the number of columns in the grid to 4.

The Complete solution to challenge:

```{r}
##############################################################################################
#Assignment task
##############################################################################################

# Load necessary libraries
library(dplyr)
library(ggplot2)
library(readxl)
library(tidyverse)

# Read in the data file
bike_orderlines_wrangled_tbl_new <- read_excel("C:/Users/LENOVO/OneDrive/Desktop/business_module/ss23-bdsb-SubramanyaGurumurthy/ds_data/01_bike_sales/02_wrangled_data/bike_orderlines_new.xlsx")

# Split the location data into separate columns for state and city
bike_orderlines_wrangled_tbl_new <- bike_orderlines_wrangled_tbl_new %>%
separate(location, into = c("city", "state"), sep = ", ", remove = FALSE)

# Group the data by state and calculate the total revenue
sales_by_loc_tbl_new <- bike_orderlines_wrangled_tbl_new %>%
group_by(state) %>%
summarize(total_revenue = sum(total_price))

# Create a bar plot of the total revenue by state#
ggplot(sales_by_loc_tbl_new, aes(x = state, y = total_revenue)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Total Revenue by State", x = "State", y = "Total Revenue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))


# Group the data by state and year and calculate the total revenue
sales_by_loc_year_tbl_new <- bike_orderlines_wrangled_tbl_new %>%
group_by(state, model_year) %>%
summarize(total_revenue = sum(total_price))

# Create a bar plot of the total revenue by state and year
ggplot(sales_by_loc_year_tbl_new, aes(x = model_year, y = total_revenue)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Total Revenue by State and Year", x = "Year", y = "Total Revenue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~state, scales = "free_x", ncol = 4)
```

# Result Plots: 

![Revenue by Year](../../plots/Task_1/Revenue by year.png)

![Toal Revenue by State](../../plots/Task_1/Total_revenue_by_state.png)

![Toal Revenue by State and Year](../../plots/Task_1/total_revenue_by_state_and_year.png)

